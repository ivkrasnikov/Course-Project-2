a<-diag(3,5)
a
a<-diag(5,3)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setCache <- function(solve) m <<- solve
getCache <- function() m
list(set = set, get = get,
setCache = setCache,
getCache = getCache)
}
cacheSolve <- function(x, ...) {
m <- x$getCache()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setcache(m)
m
}
cacheSolve(a)
x<-makeCacheMatrix(a)
cacheSolve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setCache <- function(solve) m <<- solve
getCache <- function() m
list(set = set, get = get,
setCache = setCache,
getCache = getCache)
}
cacheSolve <- function(x, ...) {
m <- x$getCache()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setCache(m)
m
}
x<-makeCacheMatrix(a)
cacheSolve(x)
diag(5,5)
a<-diag(5,5)
x<-makeCacheMatrix(a)
cacheSolve(x)
a<-diag(3,3)
a
a[1,1]=1
a
a[2,2]=1
a[2,2]=2
a
x<-makeCacheMatrix(a)
cacheSolve(x)
a<-diag(3,3)
a<-diag(3,5)
a
a<-diag(5,3)
a
x<-makeCacheMatrix(a)
cacheSolve(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setInverted <- function(inverted) i <<- inverted
getInverted <- function() i
list(set = set,
get = get,
setInverted = setInverted,
getInverted = getInverted)
}
## cacheSolve takes in a matrix and attempts to get the inverted matrix
## by accessing the cache (created from the function makeCacheMatrix). If cache is not
## available, this method will apply function solve on the parameter x
cacheSolve <- function(x, ...) {
inverted <- x$getInverted()
if(!is.null(inverted)){
message("using cached matrix")
return(inverted)
}
data <- x$get()
inverted <- solve(data,...) ##assume data is always invertible (no checks needed)
x$setInverted(inverted)
inverted
}
cached.x <- makeCacheMatrix()
cached.x$set(matrix(c(1,2,2,1),2,2))
cached.x$get()
cacheSolve(cached.x)
cached.x$get()
A<-DIAG(3,5)
A<-diag(3,5)
A
A<-diag(5,3)
ca<-cachemean(A)
ca<-makeCacheMatrix(A)
cacheSolve(ca)
cacheSolve(ca)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
set_inverse <- function(solve) m <<- solve
get_inverse <- function() m
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
## This function will just create the inverse of the matrix object computed at step 1.
## If this function has already been run on a matrix and the matrix has not changed,
## the data will be retrieved from the cache and a message indicating this will be
## displayed.
cacheSolve <- function(x, ...) {
m <- x$get_inverse()
if(!is.null(m)) {
message("value already assigned and cached")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$set_inverse(m)
m
}
A<-diag(5,3)
ca<-makeCacheMatrix(A)
ca
cacheSolve(ca)
cacheSolve(ca)
## Vincent Wang
## This is my programming assignment 2
makeCacheMatrix <- function(x = matrix()) {
## This function creates a matrix object that can cache its inverse.
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function cauculate the inverse of the matrix made by makeCacheMatrix above.
## If the inverse has already been calculated then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
## Return a matrix that is the inverse of 'x'
if (!is.null(inv)) {
message("getting data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
A<-diag(5,3)
b<-makeCacheMatrix(A)
b
cacheSolve(b)
cacheSolve
cacheSolve(b)
#makeCacheMatrix stores a matrix and a cached value of the inverse of its matrix.
makeCacheMatrix <- function(x = matrix()) {
# holds the cached value,or NULL if nothing is cached
# initially cache is set to NULL since nothing is cached.
cache <- NULL
#storing a matrix
setMatrix <- function(newValue) {
x <<- newValue
#cache is again set to NULL since a new value is given to the matrix.
cache <<- NULL
}
#returns the above stored matrix
getMatrix <- function() {
x
}
# cache the given argument
cacheInverse <- function(solve) {
cache <<- solve
}
# getting the cached value
getInverse <- function() {
cache
}
# return a list. Each element of the list is a function
list(setMatrix = setMatrix, getMatrix = getMatrix, cacheInverse = cacheInverse, getInverse = getInverse)
}
#calculating inverse of the special matrix created by makeCacheMatrix
cacheSolve <- function(y, ...) {
## Return a matrix that is the inverse of 'y'
inverse <- y$getInverse()
# if its cached value exists then return it
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
# else get the matrix
data <- y$getMatrix()
#caclulate the inverse
inverse <- solve(data)
#store it in the cache
y$cacheInverse(inverse)
# return the inverse
inverse
}
a<-diag(5,3)
a
ca<-makeCacheMatrix(a)
cacheSolve(ca)
cacheSolve(ca)
rm(list = ls(all = TRUE))
gc()
setwd("d:/coursera/Course-Project-2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
total_emission_by_year <- tapply(NEI$Emissions, NEI$year, sum)/10^6
years <- unique(NEI$year)
plot(total_emission_by_year~years, main = "Total PM2.5 emission by years", xlab = "Years", ylab = "Total emission of PM2.5 (mln. tons)")
abline(lm(total_emission_by_year~ years), lty = "dashed")
dev.copy(png, file = "plot1.png", width = 480, height = 480)
dev.off()
rm(list = ls(all = TRUE))
gc()
setwd("d:/coursera/Course-Project-2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
total_emission_by_year <- tapply(NEI$Emissions, NEI$year, sum)/10^6
years <- unique(NEI$year)
plot(total_emission_by_year~years, main = "Total PM2.5 emission by years", xlab = "Years", ylab = "Total emission of PM2.5 (mln. tons)")
abline(lm(total_emission_by_year~ years), lty = "dashed")
dev.copy(png, file = "plot1.png", width = 480, height = 480)
rm(list = ls(all = TRUE))
dev.off()
baltimoreNEI <- subset(NEI, NEI$fips == "24510")
baltimore_emission_by_year <- tapply(baltimoreNEI$Emissions, baltimoreNEI$year, sum)
years <- unique(NEI$year)
plot(baltimore_emission_by_year~years, main = "Total PM2.5 emission in the Baltimore City, Maryland by years", xlab = "Years", ylab = "Total emission of PM2.5 (tons)")
abline(lm(baltimore_emission_by_year~ years), lty = "dashed")
dev.copy(png, file = "plot2.png", width = 480, height = 480)
dev.off()
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
total_emission_by_year <- tapply(NEI$Emissions, NEI$year, sum)/10^6
years <- unique(NEI$year)
plot(total_emission_by_year~years, main = "Total PM2.5 emission by years", xlab = "Years", ylab = "Total emission of PM2.5 (mln. tons)")
abline(lm(total_emission_by_year~ years), lty = "dashed")
dev.copy(png, file = "plot1.png", width = 480, height = 480)
dev.off()
baltimoreNEI <- subset(NEI, NEI$fips == "24510")
baltimore_emission_by_year <- tapply(baltimoreNEI$Emissions, baltimoreNEI$year, sum)
years <- unique(NEI$year)
plot(baltimore_emission_by_year~years, main = "Total PM2.5 emission in the Baltimore City, Maryland by years", xlab = "Years", ylab = "Total emission of PM2.5 (tons)")
abline(lm(baltimore_emission_by_year~ years), lty = "dashed")
dev.copy(png, file = "plot2.png", width = 480, height = 480)
dev.off()
baltimoreNEI <- subset(NEI, NEI$fips == "24510")
baltimore <- aggregate(Emissions ~ year + type, baltimoreNEI, sum)
ggp <- ggplot(baltimoreNEI,aes(factor(year),Emissions,fill=type)) +
geom_bar(stat="identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type,scales = "free",space="free") +
labs(x="Year", y=expression("Total emission of PM2.5 (tons)")) +
labs(title=expression("PM2.5 Emissions in the Baltimore City, Maryland by Source Type"))
print(ggp)
dev.copy(png, file = "plot3.png", width = 480, height = 480)
dev.off()
library(ggplot2)
baltimoreNEI <- subset(NEI, NEI$fips == "24510")
baltimore <- aggregate(Emissions ~ year + type, baltimoreNEI, sum)
ggp <- ggplot(baltimoreNEI,aes(factor(year),Emissions,fill=type)) +
geom_bar(stat="identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type,scales = "free",space="free") +
labs(x="Year", y=expression("Total emission of PM2.5 (tons)")) +
labs(title=expression("PM2.5 Emissions in the Baltimore City, Maryland by Source Type"))
print(ggp)
dev.copy(png, file = "plot3.png", width = 480, height = 480)
dev.off()
coal_related  <- grepl("coal", SCC$Short.Name, ignore.case=TRUE)|grepl("coal", SCC$EI.Sector, ignore.case = TRUE)
coal_related <- SCC[coal_related, ]
coal_related <- NEI[NEI$SCC %in% coal_related$SCC, ]
ggp <- ggplot(coal_related,aes(factor(year),Emissions/10^6)) +
geom_bar(aes(fill=year), stat="identity",width=0.75) +
theme_bw() +  guides(fill=FALSE) +
labs(x="Year", y=expression("Total emission of PM2.5 (mln. tons)")) +
labs(title=expression("PM2.5 Coal Combustion Source Emissions Across US"))
print(ggp)
dev.copy(png, file = "plot4.png", width = 480, height = 480)
dev.off()
baltimoreNEI <- subset(NEI, NEI$fips == "24510" & NEI$type=="ON-ROAD")
balmore_annual <- aggregate(Emissions ~ year, baltimoreNEI, sum)
years <- unique(baltimoreNEI$year)
ggp <- ggplot(balmore_annual, aes(factor(year), Emissions)) +
geom_bar(aes(fill=year), stat="identity",width=0.75) +
guides(fill=FALSE) + theme_bw() +
labs(x="Year", y=expression("Total emission of PM2.5 (Tons)")) +
labs(title=expression("PM2.5 emissions from Motor Vehicle Source in the Baltimore City, Maryland"))
print(ggp)
dev.copy(png, file = "plot5.png", width = 480, height = 480)
dev.off()
baltimoreNEI <- subset(NEI, NEI$fips == "24510" & NEI$type=="ON-ROAD")
baltimoreNEI$city <- "Baltimore City, Maryland"
LA_NEI <- subset(NEI, NEI$fips == "06037" & NEI$type=="ON-ROAD")
LA_NEI$city <- "Los Angeles, California"
rbNEI <- rbind(baltimoreNEI,LA_NEI)
ggp <- ggplot(rbNEI, aes(x=factor(year), y=Emissions, fill=city)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(scales="free", space="free", .~city) +
guides(fill=FALSE) + theme_bw() +
labs(x="Year", y=expression("Total PM2.5 Emission (Tons)")) +
labs(title=expression("PM2.5 Motor Vehicle Source Emissions in Baltimore & LA"))
print(ggp)
dev.copy(png, file = "plot6.png", width = 480, height = 480)
dev.off()
ggp <- ggplot(rbNEI, aes(x=factor(year), y=Emissions, fill=city)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(scales="free", space="free", .~city) +
guides(fill=FALSE) + theme_bw() +
labs(x="Year", y=expression("Total PM2.5 Emission (Tons)")) +
labs(title=expression("PM2.5 Motor Vehicle Source Emissions in Baltimore & LA"))
print(ggp)
ggplot(rbNEI, aes(x=factor(year), y=Emissions, fill=city)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(scales="free", space="free", .~city) +
guides(fill=FALSE) + theme_bw() +
labs(x="Year", y=expression("Total PM2.5 Emission (Tons)")) +
labs(title=expression("PM2.5 Motor Vehicle Source Emissions in Baltimore & LA"))
plot(total_emission_by_year~years, main = "Total PM2.5 emission by years", xlab = "Years", ylab = "Total emission of PM2.5 (mln. tons)")
abline(lm(total_emission_by_year~ years), lty = "dashed")
total_emission_by_year <- tapply(NEI$Emissions, NEI$year, sum)/10^6
years <- unique(NEI$year)
plot(total_emission_by_year~years, main = "Total PM2.5 emission by years", xlab = "Years", ylab = "Total emission of PM2.5 (mln. tons)")
abline(lm(total_emission_by_year~ years), lty = "dashed")
